// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authentication/login": {
            "post": {
                "description": "It allows to login to account with email address registered",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login to account with email",
                "parameters": [
                    {
                        "description": "login with email",
                        "name": "*",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authinterface.LoginReqInterface"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authinterface.AuthenticateResInterface"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/authentication/logout": {
            "post": {
                "description": "It allows to logout users from account with JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BEARER JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/authentication/signup": {
            "post": {
                "description": "It allows to sign up with email address and personal details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Sign up with email",
                "parameters": [
                    {
                        "description": "signup with email",
                        "name": "*",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authinterface.SignUpReqInterface"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authinterface.AuthenticateResInterface"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/authentication/validate": {
            "post": {
                "description": "It allows valdidate jwt token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Validate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BEARER JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "It returns the health of the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Get health of the service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/healthinterface.Health"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies": {
            "post": {
                "description": "It allows to Create a new movie details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Create Movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BEARER JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "create movie",
                        "name": "*",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dbmodels.Movie"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/search": {
            "get": {
                "description": "It allows to search Movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Search Movies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "response limit default is 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dbmodels.Movie"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorinterface.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authinterface.AuthenticateResInterface": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "authinterface.LoginReqInterface": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "authinterface.SignUpReqInterface": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dbmodels.Movie": {
            "type": "object",
            "properties": {
                "99popularity": {
                    "type": "number"
                },
                "created_timestamp_utc": {
                    "type": "string"
                },
                "director": {
                    "type": "string"
                },
                "genre": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "imdb_score": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "updated_timestamp_utc": {
                    "type": "string"
                }
            }
        },
        "errorinterface.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "application-specific error code",
                    "type": "integer"
                },
                "error": {
                    "description": "application-level error message, for debugging",
                    "type": "string"
                },
                "satus": {
                    "description": "user-level status message",
                    "type": "string"
                }
            }
        },
        "healthinterface.Health": {
            "type": "object",
            "properties": {
                "inbound_interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/healthinterface.InboundInterface"
                    }
                },
                "outbound_interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/healthinterface.OutboundInterface"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "service_provider": {
                    "type": "string"
                },
                "service_starttime_utc": {
                    "type": "string"
                },
                "service_status": {
                    "type": "string"
                },
                "service_version": {
                    "type": "string"
                },
                "timestamp_utc": {
                    "type": "string"
                },
                "uptime": {
                    "type": "number"
                }
            }
        },
        "healthinterface.InboundInterface": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "application_name": {
                    "type": "string"
                },
                "connection_status": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "timestamp_utc": {
                    "type": "string"
                }
            }
        },
        "healthinterface.OutboundInterface": {
            "type": "object",
            "properties": {
                "application_name": {
                    "type": "string"
                },
                "connection_status": {
                    "type": "string"
                },
                "timestamp_utc": {
                    "type": "string"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0",
	Host:        "localhost:8001",
	BasePath:    "/imdb-api/v1",
	Schemes:     []string{},
	Title:       "API Documentation",
	Description: "API Documentation",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
